using System.IO;
using System.Threading.Tasks;
using NUnit.Framework;
using SQLite.Net.Async;

#if __WIN32__
using SQLitePlatformTest = SQLite.Net.Platform.Win32.SQLitePlatformWin32;
#elif WINDOWS_PHONE
using SQLitePlatformTest = SQLite.Net.Platform.WindowsPhone8.SQLitePlatformWP8;
#elif __WINRT__
using SQLitePlatformTest = SQLite.Net.Platform.WinRT.SQLitePlatformWinRT;
#elif __IOS__
using SQLitePlatformTest = SQLite.Net.Platform.XamarinIOS.SQLitePlatformIOS;
#elif __ANDROID__
using SQLitePlatformTest = SQLite.Net.Platform.XamarinAndroid.SQLitePlatformAndroid;
#else
using SQLitePlatformTest = SQLite.Net.Platform.Generic.SQLitePlatformGeneric;
#endif


namespace SQLite.Net.Tests
{
    [TestFixture]
    public class OpenTest
    {
        private const string UnicodeText = "\u01F427 \u221E";

        [Test]
        public void UnicodePaths()
        {
            string path = Path.GetTempFileName() + UnicodeText;

            using (var db = new SQLiteConnection(new SQLitePlatformTest(), path, true))
            {
                db.CreateTable<OrderLine>();
            }

            Assert.That(new FileInfo(path).Length, Is.GreaterThan(0), path);
        }

        [Test]
        public async Task UnicodePathsAsync()
        {
            string path = Path.GetTempFileName() + UnicodeText;

            var sqLiteConnectionPool = new SQLiteConnectionPool(new SQLitePlatformTest());
            var db = new SQLiteAsyncConnection(() => sqLiteConnectionPool.GetConnection(new SQLiteConnectionString(path, true)));
            await db.CreateTableAsync<OrderLine>();

            Assert.That(new FileInfo(path).Length, Is.GreaterThan(0), path);
        }
    }
}